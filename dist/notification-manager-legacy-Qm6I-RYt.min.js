System.register([],function(e,t){"use strict";return{execute:function(){class s{constructor(){this.currentUser=null,this.isLoggedIn=!1,this.isAdmin=!1,this.token=localStorage.getItem("kartel_auth_token")||localStorage.getItem("kartel_member_token")||localStorage.getItem("kartel_admin_token"),console.log("üîß Auth constructor - DOM state:",document.readyState),"loading"===document.readyState?(console.log("‚è≥ DOM loading, waiting for DOMContentLoaded..."),document.addEventListener("DOMContentLoaded",()=>{console.log("‚úÖ DOMContentLoaded fired, initializing auth..."),this.init()})):(console.log("‚úÖ DOM already ready, initializing auth with delay..."),setTimeout(()=>this.init(),50))}async init(){console.log("üöÄ Initializing Kartel Authentication System v2.0");const e=new URLSearchParams(window.location.search),t=e.get("token"),s=e.has("register")&&e.has("email");if(t&&!s)return console.log("üîó Magic link token found in URL, verifying..."),void(await this.verifyMagicToken(t));if(t&&s&&console.log("üé´ Registration token found in URL, skipping magic link verification"),this.token){console.log("üîç Found existing token, checking stored user data..."),console.log("üîç Token source:",this.token.substring(0,10)+"...");const e=localStorage.getItem("kartel_user_data"),t="true"===localStorage.getItem("kartel_is_admin"),s="true"===localStorage.getItem("kartel_is_super_admin");if(console.log("üîç Stored data check:",{hasUserData:!!e,isAdmin:t,isSuperAdmin:s,userDataLength:e?.length||0}),e){console.log("‚úÖ Found stored user data, restoring session...");try{this.currentUser=JSON.parse(e),this.isLoggedIn=!0,this.isAdmin=t,this.isSuperAdmin=s,console.log("‚úÖ Session restored for:",this.currentUser.email),this.onAuthSuccess()}catch(i){console.error("‚ùå Error parsing stored user data:",i),this.clearAuth(),this.showLogin()}}else console.log("‚ùå No stored user data, requiring fresh login..."),this.clearAuth(),this.showLogin()}else console.log("üîÑ No existing token found, showing login form now..."),this.showLogin()}async verifyToken(){try{if(console.log("üîê Verifying token:",this.token?`Token exists (${this.token.substring(0,10)}...)`:"No token"),console.log("üîç Token source check:",{auth_token:!!localStorage.getItem("kartel_auth_token"),member_token:!!localStorage.getItem("kartel_member_token"),admin_token:!!localStorage.getItem("kartel_admin_token")}),!this.token)return console.log("‚ùå No token to verify"),void this.showLogin();const e=await fetch("/.netlify/functions/verify-login-token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:this.token})});if(console.log("üìä Verify response:",e.status),e.ok){const t=await e.json();console.log("‚úÖ Token valid, user data:",t.memberEmail),this.setUserData(t),this.onAuthSuccess()}else console.log("‚ùå Token verification failed:",e.status),this.clearAuth(),this.showLogin()}catch(e){console.error("üí• Token verification error:",e),this.clearAuth(),this.showLogin()}}async verifyMagicToken(e){try{console.log("üîê Verifying magic link token...");const t=await fetch("/.netlify/functions/verify-login-token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:e})});if(t.ok){const e=await t.json();if(e.success)return this.token=e.token,this.setUserData(e),window.history.replaceState({},document.title,window.location.pathname),void this.onAuthSuccess()}console.log("‚ùå Magic token verification failed"),this.showMessage("Invalid or expired login link","error"),this.showLogin()}catch(t){console.error("üí• Magic token verification error:",t),this.showMessage("Login verification failed","error"),this.showLogin()}}setUserData(e){this.currentUser={id:e.memberId,email:e.memberEmail,firstName:e.memberProfile?.firstName||"",lastName:e.memberProfile?.lastName||"",fullName:e.memberFullName,company:e.memberProfile?.company||"",position:e.memberProfile?.position||"",phone:e.memberProfile?.phone||"",linkedin:e.memberProfile?.linkedin||"",hasPassword:e.memberProfile?.hasPassword||!1},this.isLoggedIn=!0,this.isAdmin=e.isAdmin||!1,this.isSuperAdmin=e.isSuperAdmin||!1,localStorage.setItem("kartel_auth_token",this.token),localStorage.setItem("kartel_user_data",JSON.stringify(this.currentUser)),localStorage.setItem("kartel_is_admin",this.isAdmin.toString()),localStorage.setItem("kartel_is_super_admin",this.isSuperAdmin.toString()),localStorage.setItem("kartel_member_token",this.token),localStorage.setItem("kartel_member_email",this.currentUser.email),localStorage.setItem("kartel_member_id",this.currentUser.id),localStorage.setItem("kartel_member_firstName",this.currentUser.firstName||""),localStorage.setItem("kartel_member_lastName",this.currentUser.lastName||""),localStorage.setItem("kartel_member_isAdmin",this.isAdmin.toString()),this.isAdmin&&(localStorage.setItem("kartel_admin_token",this.token),localStorage.setItem("kartel_admin_user",JSON.stringify(this.currentUser)),console.log("‚úÖ Admin legacy tokens stored for compatibility")),console.log("‚úÖ User authenticated:",{name:this.currentUser.fullName,email:this.currentUser.email,isAdmin:this.isAdmin})}async login(e,t=null){console.log(`üîê Attempting login for: ${e} (method: ${t?"password":"magic link"})`);try{const s=await fetch("/.netlify/functions/member-login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t})}),i=await s.json();return s.ok&&i.success?(this.token=i.token,this.setUserData(i),t?(this.onAuthSuccess(),{success:!0,message:"Login successful!"}):(this.showCheckEmail(e),{success:!0,checkEmail:!0,message:"Check your email for the login link!"})):{success:!1,error:i.error||"Login failed"}}catch(s){return console.error("üí• Login error:",s),{success:!1,error:"Network error. Please try again."}}}async requestPasswordReset(e){console.log(`üîÑ Requesting password reset for: ${e}`);try{const t=await fetch("/.netlify/functions/reset-member-password",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e})}),s=await t.json();return t.ok&&s.success?{success:!0,message:s.message}:{success:!1,error:s.error||"Password reset failed"}}catch(t){return console.error("üí• Password reset error:",t),{success:!1,error:"Network error. Please try again."}}}logout(){console.log("üëã User logging out"),this.clearAuth(),this.showLogin(),window.location.pathname.includes("admin")?window.location.href="/admin.html":window.location.href="/members.html"}clearAuth(){this.currentUser=null,this.isLoggedIn=!1,this.isAdmin=!1,this.isSuperAdmin=!1,this.token=null,localStorage.removeItem("kartel_auth_token"),localStorage.removeItem("kartel_user_data"),localStorage.removeItem("kartel_is_admin"),localStorage.removeItem("kartel_is_super_admin"),localStorage.removeItem("kartel_admin_token"),localStorage.removeItem("kartel_admin_user"),localStorage.removeItem("kartel_member_token"),localStorage.removeItem("kartel_member_email"),localStorage.removeItem("kartel_member_id"),localStorage.removeItem("kartel_member_firstName"),localStorage.removeItem("kartel_member_lastName"),localStorage.removeItem("kartel_member_company"),localStorage.removeItem("kartel_member_position"),localStorage.removeItem("kartel_member_phone"),localStorage.removeItem("kartel_member_linkedin"),localStorage.removeItem("kartel_member_hasPassword")}showLogin(){console.log("üîë Showing login form...");const e=document.getElementById("loginSection"),t=document.getElementById("dashboardSection"),s=document.getElementById("loadingSection");console.log("üìç Elements found:",{loginSection:!!e,dashboardSection:!!t,loadingSection:!!s}),e&&e.classList.remove("hidden"),t&&t.classList.add("hidden"),s&&s.classList.add("hidden"),this.renderLoginForm()}showCheckEmail(e){const t=document.getElementById("checkEmailMessage");t&&(t.innerHTML=`\n                <h3>Check Your Email!</h3>\n                <p>We've sent a secure login link to <strong>${e}</strong></p>\n                <p>Click the link in your email to access your account.</p>\n                <div class="sub-text">Didn't receive it? Check your spam folder or try again.</div>\n            `,t.classList.remove("hidden"));const s=document.getElementById("magicLinkForm"),i=document.getElementById("passwordForm");s&&s.classList.add("hidden"),i&&i.classList.add("hidden")}onAuthSuccess(){console.log("üéâ Authentication successful, showing dashboard");const e=document.getElementById("loginSection"),t=document.getElementById("loginContainer"),s=document.getElementById("dashboardSection"),i=document.getElementById("loadingSection");e&&e.classList.add("hidden"),t&&t.classList.add("hidden"),i&&i.classList.add("hidden"),s&&s.classList.remove("hidden"),window.kartelTopBar&&setTimeout(()=>{window.kartelTopBar.render(),window.kartelTopBar.updateUser(this.currentUser,this.isAdmin)},100),"function"==typeof window.onAuthSuccess&&window.onAuthSuccess(this.currentUser,this.isAdmin)}renderLoginForm(){const e=document.getElementById("loginContainer");e?(console.log("üìù Rendering login form in container:",e),e.innerHTML='\n            <div class="login-card">\n                <h1 class="login-title">The Kartel</h1>\n                <p style="margin-bottom: 30px; color: #7f8c8d;">Access your account</p>\n                \n                \x3c!-- Login Method Tabs --\x3e\n                <div class="login-tabs">\n                    <button type="button" class="login-tab active" onclick="kartelAuth.showMagicLinkTab()">Magic Link</button>\n                    <button type="button" class="login-tab" onclick="kartelAuth.showPasswordTab()">Password</button>\n                </div>\n                \n                \x3c!-- Magic Link Form --\x3e\n                <form id="magicLinkForm" class="login-form">\n                    <div class="form-group">\n                        <label for="magicLinkEmail">Email Address</label>\n                        <input type="email" id="magicLinkEmail" name="email" required placeholder="your@email.com">\n                    </div>\n                    <button type="submit" class="login-btn">Send Magic Link</button>\n                </form>\n                \n                \x3c!-- Password Form --\x3e\n                <form id="passwordForm" class="login-form hidden">\n                    <div class="form-group">\n                        <label for="passwordEmail">Email Address</label>\n                        <input type="email" id="passwordEmail" name="email" required placeholder="your@email.com">\n                    </div>\n                    <div class="form-group">\n                        <label for="password">Password</label>\n                        <input type="password" id="password" name="password" required placeholder="Your password">\n                    </div>\n                    <button type="submit" class="login-btn">Sign In</button>\n                    <button type="button" class="forgot-password-btn" onclick="kartelAuth.showForgotPassword()">Forgot Password?</button>\n                </form>\n                \n                \x3c!-- Check Email Message --\x3e\n                <div id="checkEmailMessage" class="check-email-message hidden"></div>\n                \n                \x3c!-- Messages --\x3e\n                <div id="loginMessage" class="hidden"></div>\n            </div>\n        ',this.attachLoginEventListeners()):console.error("‚ùå loginContainer element not found - cannot render login form")}showMagicLinkTab(){document.querySelectorAll(".login-tab").forEach(e=>e.classList.remove("active")),document.querySelectorAll(".login-form").forEach(e=>e.classList.add("hidden")),document.querySelector(".login-tab:first-child").classList.add("active"),document.getElementById("magicLinkForm").classList.remove("hidden"),document.getElementById("checkEmailMessage").classList.add("hidden")}showPasswordTab(){document.querySelectorAll(".login-tab").forEach(e=>e.classList.remove("active")),document.querySelectorAll(".login-form").forEach(e=>e.classList.add("hidden")),document.querySelector(".login-tab:last-child").classList.add("active"),document.getElementById("passwordForm").classList.remove("hidden"),document.getElementById("checkEmailMessage").classList.add("hidden")}showForgotPassword(){this.showMagicLinkTab();const e=document.getElementById("magicLinkEmail"),t=document.getElementById("passwordEmail");t.value&&(e.value=t.value),document.querySelector('#magicLinkForm button[type="submit"]').textContent="Send Reset Link",document.getElementById("magicLinkForm").setAttribute("data-reset-mode","true")}attachLoginEventListeners(){const e=document.getElementById("magicLinkForm");e&&e.addEventListener("submit",async t=>{t.preventDefault();const s=document.getElementById("magicLinkEmail").value;if("true"===e.getAttribute("data-reset-mode")){const e=await this.requestPasswordReset(s);this.showMessage(e.message,e.success?"success":"error")}else{const e=await this.login(s);this.showMessage(e.message,e.success?"success":"error")}});const t=document.getElementById("passwordForm");t&&t.addEventListener("submit",async e=>{e.preventDefault();const t=document.getElementById("passwordEmail").value,s=document.getElementById("password").value,i=await this.login(t,s);i.success&&!i.checkEmail||this.showMessage(i.message,i.success?"success":"error")})}showMessage(e,t="info"){const s=document.getElementById("loginMessage");s&&(s.className=`message ${t}`,s.textContent=e,s.classList.remove("hidden"),setTimeout(()=>{s.classList.add("hidden")},5e3))}requireAuth(e="/members.html"){return!!this.isLoggedIn||(window.location.href=e,!1)}requireAdmin(e="/members.html"){return!(!this.isLoggedIn||!this.isAdmin)||(window.location.href=e,!1)}getUser(){return this.currentUser}getToken(){return this.token}getUserFullName(){return this.currentUser?.fullName||this.currentUser?.email||"User"}isUserAdmin(){return this.isAdmin}isUserSuperAdmin(){return this.isSuperAdmin}isUserLoggedIn(){return this.isLoggedIn}}e("K",s),void 0!==t&&t.exports&&(t.exports=s);class i{constructor(){this.currentUser=null,this.isAdmin=!1,this.currentPage=this.detectCurrentPage(),console.log("üéØ Initializing Kartel Top Bar for page:",this.currentPage),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.render()):this.render()}detectCurrentPage(){const e=window.location.pathname;return e.includes("super-admin")?"super-admin":e.includes("admin")?"admin":e.includes("members")?"members":"public"}updateUser(e,t){this.currentUser=e,this.isAdmin=t,this.isSuperAdmin=e&&e.isSuperAdmin||window.kartelAuth&&window.kartelAuth.isSuperAdmin,console.log("üîÑ TopBar updateUser called:",{isAdmin:this.isAdmin,isSuperAdmin:this.isSuperAdmin,userData:e,authSuperAdmin:window.kartelAuth&&window.kartelAuth.isSuperAdmin}),this.updateUserDisplay(),this.updateNavigation()}render(){const e=document.querySelector(".header");e?(e.innerHTML=`\n            <div class="header-content">\n                <div class="header-logo">\n                    <img src="/assets/the-kartel-logo-crop.png" alt="The Kartel Logo">\n                    <h1 class="header-title">The Kartel${this.isSuperAdmin?' <span class="super-admin-badge">Super Admin</span>':""}</h1>\n                </div>\n                <div class="header-navigation">\n                    ${this.renderNavigation()}\n                    ${this.renderUserSection()}\n                </div>\n            </div>\n        `,this.attachEventListeners(),this.updateSliderPosition()):console.log("üìç No .header element found - skipping render")}renderNavigation(){if(!this.currentUser)return"";const e=[];return e.push({key:"members",name:"Member",url:"/members.html"}),(this.isAdmin||this.isSuperAdmin)&&e.push({key:"admin",name:"Admin",url:"/admin.html"}),this.isSuperAdmin&&e.push({key:"super-admin",name:"Super",url:"/super-admin.html"}),e.length<=1?`<span class="page-indicator">${{"super-admin":"Super Admin",admin:"Admin",members:"Member"}[this.currentPage]||"Dashboard"}</span>`:`\n            <div class="view-slider">\n                <div class="slider-track">\n                    ${e.map(e=>`\n            <div class="slider-option ${e.key===this.currentPage?"active":""}" \n                 data-view="${e.key}" \n                 onclick="kartelTopBar.switchToView('${e.url}')">\n                ${e.name}\n            </div>\n        `).join("")}\n                    <div class="slider-indicator"></div>\n                </div>\n            </div>\n        `}renderUserSection(){if(!this.currentUser)return"";this.currentUser.fullName||this.currentUser.firstName||this.currentUser.email;const e=this.currentUser.firstName||this.currentUser.email;return`\n            <div class="user-info">\n                <span class="member-name-clickable" onclick="${"members"===this.currentPage?"openProfileModal()":"kartelTopBar.switchToMembers()"}">${e}</span>\n                <button class="logout-btn" onclick="kartelTopBar.logout()">Logout</button>\n            </div>\n        `}updateUserDisplay(){const e=document.querySelector(".user-name");if(e&&this.currentUser){const t=this.currentUser.fullName||this.currentUser.firstName||this.currentUser.email;e.textContent=`Welcome, ${t}`}}updateNavigation(){const e=document.querySelector(".header-navigation");if(e){const t=e.querySelector(".user-info"),s=this.renderNavigation();e.querySelectorAll(".page-indicator, .switch-btn, .view-slider").forEach(e=>e.remove()),t?t.insertAdjacentHTML("beforebegin",s):e.insertAdjacentHTML("beforeend",s),this.updateSliderPosition()}}switchToMembers(){console.log("üîÑ Switching to Members view"),window.location.href="/members.html"}switchToAdmin(){console.log("üîÑ Switching to Admin view"),this.isAdmin?window.location.href="/admin.html":console.warn("‚ö†Ô∏è Non-admin user attempted to access admin view")}switchToSuperAdmin(){console.log("üîÑ Switching to Super Admin view"),this.isSuperAdmin?window.location.href="/super-admin.html":console.warn("‚ö†Ô∏è Non-super-admin user attempted to access super admin view")}switchToView(e){console.log("üîÑ Switching view to:",e),window.location.href=e}updateSliderPosition(){setTimeout(()=>{const e=document.querySelector(".slider-option.active"),t=document.querySelector(".slider-indicator");if(e&&t){const s=e.parentElement.getBoundingClientRect(),i=e.getBoundingClientRect(),o=i.left-s.left,n=i.width;t.style.transform=`translateX(${o}px)`,t.style.width=`${n}px`}},50)}logout(){console.log("üëã Logout initiated from top bar"),window.kartelAuth?window.kartelAuth.logout():(localStorage.clear(),window.location.href="/members.html")}attachEventListeners(){}show(){const e=document.querySelector(".header");e&&(e.style.display="block")}hide(){const e=document.querySelector(".header");e&&(e.style.display="none")}updateLogo(e,t="The Kartel Logo"){const s=document.querySelector(".header-logo img");s&&(s.src=e,s.alt=t)}updateTitle(e){const t=document.querySelector(".header-title");t&&(t.textContent=e)}}e("a",i),void 0!==t&&t.exports&&(t.exports=i);class NotificationManager{constructor(e="member"){this.userType=e,this.vapidPublicKey=null,this.subscription=null,this.isSupported="serviceWorker"in navigator&&"PushManager"in window,this.isSupported&&this.init()}async init(){try{await this.getVapidKey(),await this.checkExistingSubscription(),this.checkPermissionStatus()}catch(e){console.error("NotificationManager init error:",e)}}async getVapidKey(){try{const e=await fetch("/.netlify/functions/get-vapid-key");if(!e.ok)throw new Error("Failed to get VAPID key");{const t=await e.json();this.vapidPublicKey=t.publicKey,console.log("VAPID key retrieved successfully")}}catch(e){console.error("Error getting VAPID key:",e)}}async checkExistingSubscription(){if(this.isSupported)try{const e=await navigator.serviceWorker.ready,t=await e.pushManager.getSubscription();t&&(this.subscription=t,console.log("Existing push subscription found"),await this.updateSubscriptionOnServer(t))}catch(e){console.error("Error checking existing subscription:",e)}}checkPermissionStatus(){if(!this.isSupported)return;const e=Notification.permission;console.log("Notification permission status:",e),"default"!==e||localStorage.getItem(`kartel_${this.userType}_notifications_dismissed`)?"granted"!==e||this.subscription||this.subscribe():setTimeout(()=>{this.showPermissionPrompt()},"admin"===this.userType?15e3:1e4)}showPermissionPrompt(){const e=`notificationPrompt_${this.userType}`;if(document.getElementById(e))return;const t="admin"===this.userType,s=t?"#e74c3c":"#2c3e50",i=t?"#c0392b":"#3498db",o=document.createElement("div");if(o.id=e,o.style.cssText=`\n            position: fixed; bottom: 20px; right: 20px; background: ${s}; color: white;\n            padding: 20px; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n            z-index: 10000; max-width: 350px; font-family: 'League Spartan', sans-serif;\n            animation: slideInUp 0.3s ease-out;\n        `,!document.getElementById("notificationPromptStyles")){const e=document.createElement("style");e.id="notificationPromptStyles",e.textContent="\n                @keyframes slideInUp {\n                    from { transform: translateY(100%); opacity: 0; }\n                    to { transform: translateY(0); opacity: 1; }\n                }\n                @keyframes slideOutDown {\n                    from { transform: translateY(0); opacity: 1; }\n                    to { transform: translateY(100%); opacity: 0; }\n                }\n            ",document.head.appendChild(e)}o.innerHTML=`\n            <div style="margin-bottom: 15px;">\n                <div style="font-weight: 700; font-size: 1.1rem; margin-bottom: 5px;">\n                    üîî Stay Updated\n                </div>\n                <div style="font-size: 0.9rem; line-height: 1.4; opacity: 0.9;">\n                    ${t?"Get instant notifications for new applications, events, and system alerts.":"Get notified about new events, updates, and important announcements."}\n                </div>\n            </div>\n            <div style="display: flex; gap: 10px; flex-wrap: wrap;">\n                <button id="enableNotifications_${this.userType}" style="\n                    background: ${i}; color: white; border: none; \n                    padding: 10px 16px; border-radius: 5px; cursor: pointer; \n                    font-family: inherit; font-weight: 600; flex: 1;\n                ">Enable Notifications</button>\n                <button id="dismissNotifications_${this.userType}" style="\n                    background: transparent; color: #ecf0f1; border: 1px solid #bdc3c7; \n                    padding: 10px 16px; border-radius: 5px; cursor: pointer; \n                    font-family: inherit; flex: 1;\n                ">Maybe Later</button>\n            </div>\n        `,document.body.appendChild(o),document.getElementById(`enableNotifications_${this.userType}`).addEventListener("click",()=>{this.requestPermission(),this.dismissPrompt(e)}),document.getElementById(`dismissNotifications_${this.userType}`).addEventListener("click",()=>{localStorage.setItem(`kartel_${this.userType}_notifications_dismissed`,"true"),this.dismissPrompt(e)})}dismissPrompt(e){const t=document.getElementById(e);t&&(t.style.animation="slideOutDown 0.3s ease-in",setTimeout(()=>t.remove(),300))}async requestPermission(){if(!this.isSupported)return console.log("Push notifications not supported"),!1;try{const e=await Notification.requestPermission();return console.log("Notification permission result:",e),"granted"===e?(await this.subscribe(),this.showSuccessMessage(),!0):(this.showErrorMessage("Notifications were not enabled. You can enable them later in your browser settings."),!1)}catch(e){return console.error("Error requesting notification permission:",e),this.showErrorMessage("Failed to enable notifications. Please try again."),!1}}async subscribe(){if(this.isSupported&&this.vapidPublicKey)try{const e=await navigator.serviceWorker.ready,t=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:this.urlBase64ToUint8Array(this.vapidPublicKey)});console.log("Push subscription created:",t),this.subscription=t,await this.updateSubscriptionOnServer(t)}catch(e){console.error("Error creating push subscription:",e),this.showErrorMessage("Failed to set up notifications. Please try again.")}else console.log("Cannot subscribe: missing requirements")}async updateSubscriptionOnServer(e){try{const t="admin"===this.userType?"admin":window.currentMember?window.currentMember.id:null,s=await fetch("/.netlify/functions/subscribe-notifications",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({subscription:e,userType:this.userType,userId:t})});if(!s.ok)throw new Error("Failed to store subscription on server");{const e=await s.json();console.log("Subscription stored on server:",e),localStorage.setItem(`kartel_${this.userType}_subscription_id`,e.subscriptionId)}}catch(t){console.error("Error updating subscription on server:",t)}}async unsubscribe(){if(this.subscription)try{await this.subscription.unsubscribe(),this.subscription=null,localStorage.removeItem(`kartel_${this.userType}_subscription_id`),console.log("Push subscription removed"),this.showSuccessMessage("Notifications have been disabled.")}catch(e){console.error("Error unsubscribing:",e),this.showErrorMessage("Failed to disable notifications.")}}urlBase64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),s=window.atob(t),i=new Uint8Array(s.length);for(let o=0;o<s.length;++o)i[o]=s.charCodeAt(o);return i}showSuccessMessage(e){this.showMessage(e,"success")}showErrorMessage(e){this.showMessage(e,"error")}showMessage(e,t="info"){const s=`notificationMessage_${Date.now()}`,i="success"===t?"#27ae60":"#e74c3c",o=document.createElement("div");o.id=s,o.style.cssText=`\n            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);\n            background: ${i}; color: white; padding: 15px 25px;\n            border-radius: 25px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n            z-index: 10001; font-family: 'League Spartan', sans-serif;\n            font-weight: 600; animation: slideInDown 0.3s ease-out;\n        `,o.textContent=e,document.body.appendChild(o),setTimeout(()=>{o.style.animation="slideOutUp 0.3s ease-in",setTimeout(()=>o.remove(),300)},4e3)}isEnabled(){return"granted"===Notification.permission&&null!==this.subscription}getStatus(){return{supported:this.isSupported,permission:Notification.permission,subscribed:!!this.subscription,userType:this.userType}}}e("N",NotificationManager),window.NotificationManager=NotificationManager,void 0!==t&&t.exports&&(t.exports=NotificationManager)}}});
